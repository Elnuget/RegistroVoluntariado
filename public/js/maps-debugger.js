/**
 * Script de diagn√≥stico para Google Maps API
 * Ayuda a identificar problemas de configuraci√≥n y conectividad
 */

class GoogleMapsDebugger {
    constructor() {
        this.apiKey = window.GOOGLE_MAPS_API_KEY;
        this.tests = [];
    }

    async runDiagnostics() {
        console.log('üîç INICIANDO DIAGN√ìSTICOS DE GOOGLE MAPS API');
        console.log('================================================');
        
        this.checkAPIKey();
        this.checkInternetConnection();
        await this.checkAPIStatus();
        this.checkDOMElements();
        await this.testGeocodingService();
        
        this.showSummary();
    }

    checkAPIKey() {
        console.log('1Ô∏è‚É£ Verificando API Key...');
        
        if (!this.apiKey) {
            this.addTest('API Key', '‚ùå No configurada', 'Verifica el archivo .env');
            return;
        }
        
        if (this.apiKey === 'TU_API_KEY_AQUI') {
            this.addTest('API Key', '‚ùå No reemplazada', 'Reemplaza TU_API_KEY_AQUI con tu clave real');
            return;
        }
        
        if (this.apiKey.length < 30) {
            this.addTest('API Key', '‚ö†Ô∏è Parece incorrecta', 'Las API keys suelen ser m√°s largas');
            return;
        }
        
        this.addTest('API Key', '‚úÖ Configurada', `Longitud: ${this.apiKey.length} caracteres`);
    }

    checkInternetConnection() {
        console.log('2Ô∏è‚É£ Verificando conectividad...');
        
        if (navigator.onLine) {
            this.addTest('Conexi√≥n', '‚úÖ Online', 'Navegador reporta conexi√≥n activa');
        } else {
            this.addTest('Conexi√≥n', '‚ùå Offline', 'Sin conexi√≥n a internet');
        }
    }

    async checkAPIStatus() {
        console.log('3Ô∏è‚É£ Verificando estado de la API...');
        
        try {
            // Intentar cargar un script de prueba desde Google
            const testUrl = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&libraries=places`;
            const response = await fetch(testUrl, { method: 'HEAD', mode: 'no-cors' });
            this.addTest('API Endpoint', '‚úÖ Accesible', 'Servidor de Google Maps responde');
        } catch (error) {
            this.addTest('API Endpoint', '‚ùå No accesible', error.message);
        }
        
        // Verificar si Google Maps ya est√° cargado
        if (typeof google !== 'undefined' && google.maps) {
            this.addTest('Google Maps', '‚úÖ Cargado', 'API disponible en el navegador');
        } else {
            this.addTest('Google Maps', '‚ùå No cargado', 'API no disponible');
        }
    }

    checkDOMElements() {
        console.log('4Ô∏è‚É£ Verificando elementos del DOM...');
        
        const mapElement = document.getElementById('map');
        if (mapElement) {
            const rect = mapElement.getBoundingClientRect();
            this.addTest('Elemento Mapa', '‚úÖ Encontrado', `Tama√±o: ${rect.width}x${rect.height}px`);
        } else {
            this.addTest('Elemento Mapa', '‚ùå No encontrado', 'Elemento #map no existe');
        }

        const origenInput = document.getElementById('ubicacion_desde');
        const destinoInput = document.getElementById('ubicacion_hasta');
        
        if (origenInput && destinoInput) {
            this.addTest('Campos Ubicaci√≥n', '‚úÖ Encontrados', 'Inputs de origen y destino existen');
        } else {
            this.addTest('Campos Ubicaci√≥n', '‚ùå Faltantes', 'Algunos inputs no encontrados');
        }
    }

    async testGeocodingService() {
        console.log('5Ô∏è‚É£ Probando servicio de geocodificaci√≥n...');
        
        if (typeof google === 'undefined' || !google.maps) {
            this.addTest('Geocodificaci√≥n', '‚ùå No disponible', 'Google Maps no cargado');
            return;
        }

        try {
            const geocoder = new google.maps.Geocoder();
            const testAddress = '1233 Rose Vista Ct, Roseville, MN';
            
            const result = await new Promise((resolve, reject) => {
                geocoder.geocode({ address: testAddress }, (results, status) => {
                    if (status === 'OK') {
                        resolve(results[0]);
                    } else {
                        reject(new Error(status));
                    }
                });
            });

            this.addTest('Geocodificaci√≥n', '‚úÖ Funcional', `Probado con: ${testAddress}`);
            console.log('üìç Resultado:', result.formatted_address);
            
        } catch (error) {
            this.addTest('Geocodificaci√≥n', '‚ùå Error', error.message);
        }
    }

    addTest(category, status, details) {
        this.tests.push({ category, status, details });
        console.log(`   ${status} ${category}: ${details}`);
    }

    showSummary() {
        console.log('\nüìä RESUMEN DE DIAGN√ìSTICOS');
        console.log('========================');
        
        const passed = this.tests.filter(t => t.status.includes('‚úÖ')).length;
        const warnings = this.tests.filter(t => t.status.includes('‚ö†Ô∏è')).length;
        const failed = this.tests.filter(t => t.status.includes('‚ùå')).length;
        
        console.log(`‚úÖ Exitosos: ${passed}`);
        console.log(`‚ö†Ô∏è Advertencias: ${warnings}`);
        console.log(`‚ùå Fallidos: ${failed}`);
        
        if (failed > 0) {
            console.log('\nüîß ACCIONES RECOMENDADAS:');
            this.tests.filter(t => t.status.includes('‚ùå')).forEach(test => {
                console.log(`‚Ä¢ ${test.category}: ${test.details}`);
            });
        }
        
        if (failed === 0 && warnings === 0) {
            console.log('\nüéâ ¬°Todo parece estar configurado correctamente!');
        }
    }

    // M√©todo para probar una direcci√≥n espec√≠fica
    async testAddress(address) {
        console.log(`üß™ Probando direcci√≥n: ${address}`);
        
        if (typeof google === 'undefined' || !google.maps) {
            console.error('‚ùå Google Maps no disponible');
            return null;
        }

        const geocoder = new google.maps.Geocoder();
        
        try {
            const result = await new Promise((resolve, reject) => {
                geocoder.geocode({ 
                    address: address,
                    componentRestrictions: { country: 'US', administrativeArea: 'MN' }
                }, (results, status) => {
                    if (status === 'OK') {
                        resolve(results[0]);
                    } else {
                        reject(new Error(status));
                    }
                });
            });

            console.log('‚úÖ Direcci√≥n encontrada:', result.formatted_address);
            console.log('üìç Coordenadas:', result.geometry.location.lat(), result.geometry.location.lng());
            return result;
            
        } catch (error) {
            console.error('‚ùå Error:', error.message);
            return null;
        }
    }
}

// Crear instancia global para debugging
window.mapsDebugger = new GoogleMapsDebugger();

// Ejecutar diagn√≥sticos autom√°ticamente despu√©s de cargar
document.addEventListener('DOMContentLoaded', function() {
    // Esperar un poco para que todo se cargue
    setTimeout(() => {
        if (window.location.search.includes('debug=maps')) {
            window.mapsDebugger.runDiagnostics();
        }
    }, 2000);
});

console.log('üîß Google Maps Debugger cargado');
console.log('üí° Usa: mapsDebugger.runDiagnostics() para ejecutar diagn√≥sticos');
console.log('üí° Usa: mapsDebugger.testAddress("direcci√≥n") para probar una direcci√≥n');
console.log('üí° O agrega ?debug=maps a la URL para diagn√≥sticos autom√°ticos');
